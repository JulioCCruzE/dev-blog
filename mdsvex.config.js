import math from 'remark-math';
import rehype_katex from 'rehype-katex';
import katex from 'katex';
import visit from 'unist-util-visit';

const correct_hast_tree = () => (tree) => {
	visit(tree, 'text', (node) => {
		if (node.value.trim().startsWith('<')) {
			node.type = 'raw';
			// console.log('test correct hast tree');
		}
	});
};

const katex_blocks = () => (tree) => {
	visit(tree, 'code', (node) => {
		if (node.lang === 'math') {
			try {
				var str = katex.renderToString(node.value, {
					displayMode: true,
					leqno: false,
					fleqn: false,
					throwOnError: true,
					errorColor: '#cc0000',
					strict: 'warn',
					output: 'htmlAndMathml',
					trust: false,
					macros: { '\\f': '#1f(#2)' }
				});
			} catch (e) {
				if (e instanceof katex.ParseError) {
					// const str = 'error in latex! ' + node.value + ': ' + e.message;
					console.log("Katex can't parse the text");
				} else {
					console.log('otro error');
					throw e;
				}
			}
			// a parse-error is not generated by Katex if not vite pluggin
			// the error is generated by some latex command like \underbrace, \xLeftarrow
			// My theory:
			// this commands starts with \u and \x then, in the preprocess,
			// vite pluggin think this special characters are regular expressions
			// for example the regular expresion \xhh is use for express two hex digits
			// and the regular expresion \uhhhh is use for express four hex digits
			//  END my theory
			// my solution is search and delate the \ charcter into the string,
			// also i have to put atention in the behaivour of this solution.
			var match = str.replaceAll('\\u', ' u');

			//code for debug, I search hardcode string "hola" for only print the representation of \underbrace{hola}
			//also convert string to hex to see the posible error, (I search for a double space, but finaly was not the solution)
			// var match = str.replace(/\u23df/g, '\u23de'); //search and replace underbrace for overbrace
			// var position = match.search('hola');
			// if (position != -1) { // -1 means: no found the respective string
			// console.log(match);
			// var hex = '';
			// for (var i = 0; i < match.length; i++) {
			// 	hex += ' ' + match.charCodeAt(i).toString(16);
			// }
			// console.log(hex);
			// }
			node.type = 'raw';
			node.value = '{@html `' + match + '`}';
			// console.log(str);
		}
	});
};

const config = {
	extensions: ['.md'],
	remarkPlugins: [math, katex_blocks],
	rehypePlugins: [correct_hast_tree, rehype_katex]
};

export default config;
